import{S as ut,i as ft,s as ht,e as r,t as c,k as m,w as W,c as u,a as f,h as p,d as t,m as g,x as Y,b as v,g as l,G as o,y as z,q as G,o as J,B as K}from"../../../chunks/vendor-9c551f02.js";import"../../../chunks/ContextMenu.svelte_svelte_type_style_lang-806ab04e.js";import{T as _e}from"../../../chunks/ToggleSwitch-d4a933f6.js";/* empty css                                                            */import{S as mt}from"../../../chunks/Showcase-188efe60.js";import{A as gt}from"../../../chunks/APIDocs-0423bc85.js";import"../../../chunks/TooltipWrapper-3e5457be.js";import"../../../chunks/IconButton-c8cc9811.js";import"../../../chunks/Button-a7276b10.js";import"../../../chunks/InfoBar-c9f740b0.js";var wt={props:[{name:"checked",kind:"let",description:"Controls whether the switch is toggled or not.",type:"boolean",value:"false",isFunction:!1,isFunctionDeclaration:!1,constant:!1,reactive:!0},{name:"value",kind:"let",description:"Sets the input element's native `value` attribute for usage in forms.",isFunction:!1,isFunctionDeclaration:!1,constant:!1,reactive:!1},{name:"disabled",kind:"let",description:"Controls whether the switch is intended for user interaction, and styles it accordingly.",type:"boolean",value:"false",isFunction:!1,isFunctionDeclaration:!1,constant:!1,reactive:!1},{name:"inputElement",kind:"let",description:"Obtains a bound DOM reference to the switch's <input /> element.",type:"null | HTMLInputElement",value:"null",isFunction:!1,isFunctionDeclaration:!1,constant:!1,reactive:!0},{name:"containerElement",kind:"let",description:"Obtains a bound DOM reference to the switch's outer container element.",type:"null | HTMLLabelElement",value:"null",isFunction:!1,isFunctionDeclaration:!1,constant:!1,reactive:!0}],slots:[{name:"__default__",default:!0,slot_props:"{}"}],events:[],typedefs:[],rest_props:{type:"Element",name:"input"}};function kt(b){let n;return{c(){n=c("ToggleSwitch")},l(i){n=p(i,"ToggleSwitch")},m(i,h){l(i,n,h)},d(i){i&&t(n)}}}function dt(b){let n;return{c(){n=c("ToggleSwitch")},l(i){n=p(i,"ToggleSwitch")},m(i,h){l(i,n,h)},d(i){i&&t(n)}}}function $t(b){let n;return{c(){n=c("ToggleSwitch")},l(i){n=p(i,"ToggleSwitch")},m(i,h){l(i,n,h)},d(i){i&&t(n)}}}function _t(b){let n;return{c(){n=c("ToggleSwitch")},l(i){n=p(i,"ToggleSwitch")},m(i,h){l(i,n,h)},d(i){i&&t(n)}}}function vt(b){let n,i,h,d,T,y,k,E;return n=new _e({props:{$$slots:{default:[kt]},$$scope:{ctx:b}}}),h=new _e({props:{checked:!0,$$slots:{default:[dt]},$$scope:{ctx:b}}}),T=new _e({props:{disabled:!0,$$slots:{default:[$t]},$$scope:{ctx:b}}}),k=new _e({props:{checked:!0,disabled:!0,$$slots:{default:[_t]},$$scope:{ctx:b}}}),{c(){W(n.$$.fragment),i=m(),W(h.$$.fragment),d=m(),W(T.$$.fragment),y=m(),W(k.$$.fragment)},l(s){Y(n.$$.fragment,s),i=g(s),Y(h.$$.fragment,s),d=g(s),Y(T.$$.fragment,s),y=g(s),Y(k.$$.fragment,s)},m(s,w){z(n,s,w),l(s,i,w),z(h,s,w),l(s,d,w),z(T,s,w),l(s,y,w),z(k,s,w),E=!0},p(s,w){const H={};w&1&&(H.$$scope={dirty:w,ctx:s}),n.$set(H);const $={};w&1&&($.$$scope={dirty:w,ctx:s}),h.$set($);const S={};w&1&&(S.$$scope={dirty:w,ctx:s}),T.$set(S);const R={};w&1&&(R.$$scope={dirty:w,ctx:s}),k.$set(R)},i(s){E||(G(n.$$.fragment,s),G(h.$$.fragment,s),G(T.$$.fragment,s),G(k.$$.fragment,s),E=!0)},o(s){J(n.$$.fragment,s),J(h.$$.fragment,s),J(T.$$.fragment,s),J(k.$$.fragment,s),E=!1},d(s){K(n,s),s&&t(i),K(h,s),s&&t(d),K(T,s),s&&t(y),K(k,s)}}}function bt(b){let n,i,h,d,T='<code class="language-ts"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> ToggleSwitch <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"fluent-svelte"</span><span class="token punctuation">;</span></code>',y,k,E,s,w,H,$,S,R,ve,N,be,Te,se,I,ye,ae,P,Ee,Q,Se,Pe,le,A,nt='<code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ToggleSwitch</span> <span class="token attr-name">checked</span> <span class="token punctuation">/></span></span></code>',ne,q,De,oe,F,ot=`<code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">
	<span class="token keyword">import</span> <span class="token punctuation">&#123;</span> ToggleSwitch <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"fluent-svelte"</span><span class="token punctuation">;</span>

	<span class="token keyword">let</span> checked <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ToggleSwitch</span> <span class="token attr-name"><span class="token namespace">bind:</span>checked</span> <span class="token punctuation">/></span></span>

Current state: &#123;checked ? "checked" : "unchecked"&#125;</code>`,ie,L,Ce,ce,V,He,pe,M,it='<code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ToggleSwitch</span><span class="token punctuation">></span></span>I have a label!<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ToggleSwitch</span><span class="token punctuation">></span></span></code>',re,j,Ie,ue,_,Ae,X,Fe,Le,x,Me,je,Z,xe,Oe,fe,O,Ue,he,D,Be,ee,Re,qe,me,U,Ve,ge,B,we;return k=new mt({props:{columns:2,repl:"4b7217ee24294302937ec6c69db1bbc0",$$slots:{default:[vt]},$$scope:{ctx:b}}}),B=new gt({props:{data:wt}}),{c(){n=r("p"),i=c("The toggle switch represents a physical switch that allows users to turn things on or off, like a light switch. Use toggle switch controls to present users with two mutually exclusive options (such as on/off), where choosing an option provides immediate results."),h=m(),d=r("pre"),y=m(),W(k.$$.fragment),E=m(),s=r("h2"),w=c("Usage"),H=m(),$=r("p"),S=r("code"),R=c("<ToggleSwitch />"),ve=c(" is a wrapper around HTML\u2019s "),N=r("code"),be=c("<input />"),Te=c(" checkbox type. As such, the APIs share some similarities."),se=m(),I=r("h3"),ye=c("Checking and Unchecking"),ae=m(),P=r("p"),Ee=c("You can programmatically control if the ToggleSwitch is in it\u2019s checked state by setting the "),Q=r("code"),Se=c("checked"),Pe=c(" property."),le=m(),A=r("pre"),ne=m(),q=r("p"),De=c("Additionally, you can use svelte\u2019s two-way binding syntax to bind the checked state to a variable."),oe=m(),F=r("pre"),ie=m(),L=r("h3"),Ce=c("Labels"),ce=m(),V=r("p"),He=c("Passing in content to the ToggleSwitch\u2019s slot will cause that content to be rendered into a label for the control."),pe=m(),M=r("pre"),re=m(),j=r("h3"),Ie=c("Value"),ue=m(),_=r("p"),Ae=c("For usage in forms, you can set a "),X=r("code"),Fe=c("value"),Le=c(" property which will set the "),x=r("a"),Me=c("value"),je=c(" of the ToggleSwitch\u2019s "),Z=r("code"),xe=c("<input>"),Oe=c(" element."),fe=m(),O=r("h3"),Ue=c("Disabled ToggleSwitches"),he=m(),D=r("p"),Be=c("If the ToggleSwitch is not meant to be clicked, you can use the "),ee=r("code"),Re=c("disabled"),qe=c(" property to visually indicate this. If a ToggleSwitch is disabled, it will be unclickable."),me=m(),U=r("h2"),Ve=c("Component API"),ge=m(),W(B.$$.fragment),this.h()},l(e){n=u(e,"P",{});var a=f(n);i=p(a,"The toggle switch represents a physical switch that allows users to turn things on or off, like a light switch. Use toggle switch controls to present users with two mutually exclusive options (such as on/off), where choosing an option provides immediate results."),a.forEach(t),h=g(e),d=u(e,"PRE",{class:!0});var ke=f(d);ke.forEach(t),y=g(e),Y(k.$$.fragment,e),E=g(e),s=u(e,"H2",{id:!0});var We=f(s);w=p(We,"Usage"),We.forEach(t),H=g(e),$=u(e,"P",{});var te=f($);S=u(te,"CODE",{});var Ye=f(S);R=p(Ye,"<ToggleSwitch />"),Ye.forEach(t),ve=p(te," is a wrapper around HTML\u2019s "),N=u(te,"CODE",{});var ze=f(N);be=p(ze,"<input />"),ze.forEach(t),Te=p(te," checkbox type. As such, the APIs share some similarities."),te.forEach(t),se=g(e),I=u(e,"H3",{id:!0});var Ge=f(I);ye=p(Ge,"Checking and Unchecking"),Ge.forEach(t),ae=g(e),P=u(e,"P",{});var de=f(P);Ee=p(de,"You can programmatically control if the ToggleSwitch is in it\u2019s checked state by setting the "),Q=u(de,"CODE",{});var Je=f(Q);Se=p(Je,"checked"),Je.forEach(t),Pe=p(de," property."),de.forEach(t),le=g(e),A=u(e,"PRE",{class:!0});var ct=f(A);ct.forEach(t),ne=g(e),q=u(e,"P",{});var Ke=f(q);De=p(Ke,"Additionally, you can use svelte\u2019s two-way binding syntax to bind the checked state to a variable."),Ke.forEach(t),oe=g(e),F=u(e,"PRE",{class:!0});var pt=f(F);pt.forEach(t),ie=g(e),L=u(e,"H3",{id:!0});var Ne=f(L);Ce=p(Ne,"Labels"),Ne.forEach(t),ce=g(e),V=u(e,"P",{});var Qe=f(V);He=p(Qe,"Passing in content to the ToggleSwitch\u2019s slot will cause that content to be rendered into a label for the control."),Qe.forEach(t),pe=g(e),M=u(e,"PRE",{class:!0});var rt=f(M);rt.forEach(t),re=g(e),j=u(e,"H3",{id:!0});var Xe=f(j);Ie=p(Xe,"Value"),Xe.forEach(t),ue=g(e),_=u(e,"P",{});var C=f(_);Ae=p(C,"For usage in forms, you can set a "),X=u(C,"CODE",{});var Ze=f(X);Fe=p(Ze,"value"),Ze.forEach(t),Le=p(C," property which will set the "),x=u(C,"A",{href:!0,rel:!0});var et=f(x);Me=p(et,"value"),et.forEach(t),je=p(C," of the ToggleSwitch\u2019s "),Z=u(C,"CODE",{});var tt=f(Z);xe=p(tt,"<input>"),tt.forEach(t),Oe=p(C," element."),C.forEach(t),fe=g(e),O=u(e,"H3",{id:!0});var st=f(O);Ue=p(st,"Disabled ToggleSwitches"),st.forEach(t),he=g(e),D=u(e,"P",{});var $e=f(D);Be=p($e,"If the ToggleSwitch is not meant to be clicked, you can use the "),ee=u($e,"CODE",{});var at=f(ee);Re=p(at,"disabled"),at.forEach(t),qe=p($e," property to visually indicate this. If a ToggleSwitch is disabled, it will be unclickable."),$e.forEach(t),me=g(e),U=u(e,"H2",{id:!0});var lt=f(U);Ve=p(lt,"Component API"),lt.forEach(t),ge=g(e),Y(B.$$.fragment,e),this.h()},h(){v(d,"class","language-ts"),v(s,"id","usage"),v(I,"id","checking-and-unchecking"),v(A,"class","language-html"),v(F,"class","language-html"),v(L,"id","labels"),v(M,"class","language-html"),v(j,"id","value"),v(x,"href","https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/checkbox#value"),v(x,"rel","nofollow"),v(O,"id","disabled-toggleswitches"),v(U,"id","component-api")},m(e,a){l(e,n,a),o(n,i),l(e,h,a),l(e,d,a),d.innerHTML=T,l(e,y,a),z(k,e,a),l(e,E,a),l(e,s,a),o(s,w),l(e,H,a),l(e,$,a),o($,S),o(S,R),o($,ve),o($,N),o(N,be),o($,Te),l(e,se,a),l(e,I,a),o(I,ye),l(e,ae,a),l(e,P,a),o(P,Ee),o(P,Q),o(Q,Se),o(P,Pe),l(e,le,a),l(e,A,a),A.innerHTML=nt,l(e,ne,a),l(e,q,a),o(q,De),l(e,oe,a),l(e,F,a),F.innerHTML=ot,l(e,ie,a),l(e,L,a),o(L,Ce),l(e,ce,a),l(e,V,a),o(V,He),l(e,pe,a),l(e,M,a),M.innerHTML=it,l(e,re,a),l(e,j,a),o(j,Ie),l(e,ue,a),l(e,_,a),o(_,Ae),o(_,X),o(X,Fe),o(_,Le),o(_,x),o(x,Me),o(_,je),o(_,Z),o(Z,xe),o(_,Oe),l(e,fe,a),l(e,O,a),o(O,Ue),l(e,he,a),l(e,D,a),o(D,Be),o(D,ee),o(ee,Re),o(D,qe),l(e,me,a),l(e,U,a),o(U,Ve),l(e,ge,a),z(B,e,a),we=!0},p(e,[a]){const ke={};a&1&&(ke.$$scope={dirty:a,ctx:e}),k.$set(ke)},i(e){we||(G(k.$$.fragment,e),G(B.$$.fragment,e),we=!0)},o(e){J(k.$$.fragment,e),J(B.$$.fragment,e),we=!1},d(e){e&&t(n),e&&t(h),e&&t(d),e&&t(y),K(k,e),e&&t(E),e&&t(s),e&&t(H),e&&t($),e&&t(se),e&&t(I),e&&t(ae),e&&t(P),e&&t(le),e&&t(A),e&&t(ne),e&&t(q),e&&t(oe),e&&t(F),e&&t(ie),e&&t(L),e&&t(ce),e&&t(V),e&&t(pe),e&&t(M),e&&t(re),e&&t(j),e&&t(ue),e&&t(_),e&&t(fe),e&&t(O),e&&t(he),e&&t(D),e&&t(me),e&&t(U),e&&t(ge),K(B,e)}}}class Ft extends ut{constructor(n){super();ft(this,n,null,bt,ht,{})}}export{Ft as default};
