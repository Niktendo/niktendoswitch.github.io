interface ExternalizeOptions {
    external?: (string | RegExp)[];
    inline?: (string | RegExp)[];
    fallbackCJS?: boolean;
}
declare type FetchFunction = (id: string) => Promise<{
    code?: string;
    externalize?: string;
}>;
interface ModuleCache {
    promise?: Promise<any>;
    exports?: any;
    code?: string;
}
interface ViteNodeRunnerOptions {
    fetchModule: FetchFunction;
    root: string;
    base?: string;
    moduleCache?: Map<string, ModuleCache>;
    interpretDefault?: boolean;
    requestStubs?: Record<string, any>;
}
interface ViteNodeServerOptions {
    deps?: ExternalizeOptions;
    transformMode?: {
        ssr?: RegExp[];
        web?: RegExp[];
    };
}

export { ExternalizeOptions, FetchFunction, ModuleCache, ViteNodeRunnerOptions, ViteNodeServerOptions };
