"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
var __asyncValues = (this && this.__asyncValues) || function (o) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var m = o[Symbol.asyncIterator], i;
    return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }
};
exports.__esModule = true;
exports.writeTsDefinition = exports.getTypeDefs = exports.formatTsProps = void 0;
var path = require("path");
var create_exports_1 = require("../create-exports");
var Writer_1 = require("./Writer");
var ANY_TYPE = "any";
var EMPTY_STR = "";
function formatTsProps(props) {
    if (props === undefined)
        return ANY_TYPE;
    return props + "\n";
}
exports.formatTsProps = formatTsProps;
function getTypeDefs(def) {
    if (def.typedefs.length === 0)
        return EMPTY_STR;
    return def.typedefs.map(function (typedef) { return "export " + typedef.ts; }).join("\n\n");
}
exports.getTypeDefs = getTypeDefs;
function clampKey(key) {
    if (/(\-|\s+|\:)/.test(key)) {
        return /(\"|\')/.test(key) ? key : "[\"" + key + "\"]";
    }
    return key;
}
function addCommentLine(value, returnValue) {
    if (!value)
        return undefined;
    return "* " + (returnValue || value) + "\n";
}
function genPropDef(def) {
    var _a;
    var props = def.props
        .filter(function (prop) { return !prop.isFunctionDeclaration && prop.kind !== "const"; })
        .map(function (prop) {
        var _a;
        var prop_comments = [
            addCommentLine((_a = prop.description) === null || _a === void 0 ? void 0 : _a.replace(/\n/g, "\n* ")),
            addCommentLine(prop.constant, "@constant"),
            addCommentLine(prop.value, "@default " + (typeof prop.value === "string" ? prop.value.replace(/\s+/g, " ") : prop.value)),
        ]
            .filter(Boolean)
            .join("");
        var prop_value = prop.constant && !prop.isFunction ? prop.value : prop.type;
        return "\n      " + (prop_comments.length > 0 ? "/**\n" + prop_comments + "*/" : EMPTY_STR) + "\n      " + prop.name + "?: " + prop_value + ";";
    })
        .join("\n");
    var props_name = def.moduleName + "Props";
    var prop_def = EMPTY_STR;
    if (((_a = def.rest_props) === null || _a === void 0 ? void 0 : _a.type) === "Element") {
        var extend_tag_map = def.rest_props.name
            .split("|")
            .map(function (name) { return "svelte.JSX.HTMLAttributes<HTMLElementTagNameMap[\"" + name.trim() + "\"]>"; })
            .join(",");
        prop_def = "\n    export interface " + props_name + " extends " + (def["extends"] !== undefined ? def["extends"].interface + ", " : "") + extend_tag_map + " {\n      " + props + "\n    }\n  ";
    }
    else {
        prop_def = "\n    export interface " + props_name + " " + (def["extends"] !== undefined ? "extends " + def["extends"].interface : "") + " {\n      " + props + "\n    }\n  ";
    }
    return {
        props_name: props_name,
        prop_def: prop_def
    };
}
function genSlotDef(def) {
    return def.slots
        .map(function (_a) {
        var name = _a.name, slot_props = _a.slot_props, rest = __rest(_a, ["name", "slot_props"]);
        var key = rest["default"] ? "default" : clampKey(name);
        return clampKey(key) + ": " + formatTsProps(slot_props) + ";";
    })
        .join("\n");
}
function genEventDef(def) {
    return def.events
        .map(function (event) {
        return clampKey(event.name) + ": " + (event.type === "dispatched" ? "CustomEvent<" + (event.detail || ANY_TYPE) + ">" : "WindowEventMap[\"" + event.name + "\"]") + ";";
    })
        .join("\n");
}
function genAccessors(def) {
    return def.props
        .filter(function (prop) { return prop.isFunctionDeclaration || prop.kind === "const"; })
        .map(function (prop) {
        var _a;
        var prop_comments = [
            addCommentLine((_a = prop.description) === null || _a === void 0 ? void 0 : _a.replace(/\n/g, "\n* ")),
            addCommentLine(prop.constant, "@constant"),
            addCommentLine(prop.value, "@default " + (typeof prop.value === "string" ? prop.value.replace(/\s+/g, " ") : prop.value)),
        ]
            .filter(Boolean)
            .join("");
        return "\n    " + (prop_comments.length > 0 ? "/**\n" + prop_comments + "*/" : EMPTY_STR) + "\n    " + prop.name + ": " + prop.type + ";";
    })
        .join("\n");
}
function genImports(def) {
    if (def["extends"] === undefined)
        return "";
    return "import { " + def["extends"].interface + " } from " + def["extends"]["import"] + ";";
}
function writeTsDefinition(component) {
    var moduleName = component.moduleName, typedefs = component.typedefs, props = component.props, slots = component.slots, events = component.events, rest_props = component.rest_props, _extends = component["extends"];
    var _a = genPropDef({
        moduleName: moduleName,
        props: props,
        rest_props: rest_props,
        "extends": _extends
    }), props_name = _a.props_name, prop_def = _a.prop_def;
    return "\n  /// <reference types=\"svelte\" />\n  import { SvelteComponentTyped } from \"svelte\";\n  " + genImports({ "extends": _extends }) + "\n  " + getTypeDefs({ typedefs: typedefs }) + "\n  " + prop_def + "\n\n  export default class " + (moduleName === "default" ? "" : moduleName) + " extends SvelteComponentTyped<\n      " + props_name + ",\n      {" + genEventDef({ events: events }) + "},\n      {" + genSlotDef({ slots: slots }) + "}\n    > {\n      " + genAccessors({ props: props }) + "\n    }";
}
exports.writeTsDefinition = writeTsDefinition;
function writeTsDefinitions(components, options) {
    var components_1, components_1_1;
    var e_1, _a;
    return __awaiter(this, void 0, void 0, function () {
        var ts_base_path, writer, indexDTs, _b, moduleName, component, ts_filepath, e_1_1;
        return __generator(this, function (_c) {
            switch (_c.label) {
                case 0:
                    ts_base_path = path.join(process.cwd(), options.outDir, "index.d.ts");
                    writer = new Writer_1["default"]({ parser: "typescript", printWidth: 80 });
                    indexDTs = options.preamble + create_exports_1.createExports(options.exports);
                    _c.label = 1;
                case 1:
                    _c.trys.push([1, 7, 8, 13]);
                    components_1 = __asyncValues(components);
                    _c.label = 2;
                case 2: return [4 /*yield*/, components_1.next()];
                case 3:
                    if (!(components_1_1 = _c.sent(), !components_1_1.done)) return [3 /*break*/, 6];
                    _b = components_1_1.value, moduleName = _b[0], component = _b[1];
                    ts_filepath = create_exports_1.convertSvelteExt(path.join(options.outDir, component.filePath));
                    return [4 /*yield*/, writer.write(ts_filepath, writeTsDefinition(component))];
                case 4:
                    _c.sent();
                    _c.label = 5;
                case 5: return [3 /*break*/, 2];
                case 6: return [3 /*break*/, 13];
                case 7:
                    e_1_1 = _c.sent();
                    e_1 = { error: e_1_1 };
                    return [3 /*break*/, 13];
                case 8:
                    _c.trys.push([8, , 11, 12]);
                    if (!(components_1_1 && !components_1_1.done && (_a = components_1["return"]))) return [3 /*break*/, 10];
                    return [4 /*yield*/, _a.call(components_1)];
                case 9:
                    _c.sent();
                    _c.label = 10;
                case 10: return [3 /*break*/, 12];
                case 11:
                    if (e_1) throw e_1.error;
                    return [7 /*endfinally*/];
                case 12: return [7 /*endfinally*/];
                case 13: return [4 /*yield*/, writer.write(ts_base_path, indexDTs)];
                case 14:
                    _c.sent();
                    process.stdout.write("created TypeScript definitions.\n");
                    return [2 /*return*/];
            }
        });
    });
}
exports["default"] = writeTsDefinitions;
