declare type FetchFunction = (id: string) => Promise<{
    code?: string;
    externalize?: string;
}>;
declare type ResolveIdFunction = (id: string, importer?: string) => Promise<ViteNodeResolveId | null>;
interface ModuleCache {
    promise?: Promise<any>;
    exports?: any;
    code?: string;
}
interface ViteNodeRunnerOptions {
    fetchModule: FetchFunction;
    resolveId: ResolveIdFunction;
    root: string;
    base?: string;
    moduleCache?: Map<string, ModuleCache>;
    interpretDefault?: boolean;
    requestStubs?: Record<string, any>;
}
interface ViteNodeResolveId {
    external?: boolean | 'absolute' | 'relative';
    id: string;
    meta?: Record<string, any> | null;
    moduleSideEffects?: boolean | 'no-treeshake' | null;
    syntheticNamedExports?: boolean | string | null;
}

declare class ViteNodeRunner {
    options: ViteNodeRunnerOptions;
    root: string;
    externalCache: Map<string, string | Promise<false | string>>;
    moduleCache: Map<string, ModuleCache>;
    constructor(options: ViteNodeRunnerOptions);
    executeFile(file: string): Promise<any>;
    executeId(id: string): Promise<any>;
    cachedRequest(rawId: string, callstack: string[]): Promise<any>;
    directRequest(id: string, fsPath: string, callstack: string[]): Promise<any>;
    prepareContext(context: Record<string, any>): Record<string, any>;
    setCache(id: string, mod: Partial<ModuleCache>): void;
}

export { ViteNodeRunner };
