import { ViteDevServer, TransformResult } from 'vite';

interface ExternalizeOptions {
    external?: (string | RegExp)[];
    inline?: (string | RegExp)[];
    fallbackCJS?: boolean;
}
interface ViteNodeServerOptions {
    deps?: ExternalizeOptions;
    transformMode?: {
        ssr?: RegExp[];
        web?: RegExp[];
    };
}

declare function guessCJSversion(id: string): string | undefined;
declare function shouldExternalize(id: string, config?: ExternalizeOptions, cache?: Map<string, Promise<string | false>>): Promise<string | false>;

declare class ViteNodeServer {
    server: ViteDevServer;
    options: ViteNodeServerOptions;
    promiseMap: Map<string, Promise<TransformResult | null | undefined>>;
    constructor(server: ViteDevServer, options?: ViteNodeServerOptions);
    shouldExternalize(id: string): Promise<string | false>;
    fetchModule(id: string): Promise<{
        externalize: string;
        code?: undefined;
    } | {
        code: string | undefined;
        externalize?: undefined;
    }>;
    transformRequest(id: string): Promise<TransformResult | null | undefined>;
    private getTransformMode;
    private _transformRequest;
}
declare function withInlineSourcemap(result: TransformResult): Promise<TransformResult>;

export { ViteNodeServer, guessCJSversion, shouldExternalize, withInlineSourcemap };
