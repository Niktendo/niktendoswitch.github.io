import { ViteDevServer, TransformResult } from 'vite';

interface DepsHandlingOptions {
    external?: (string | RegExp)[];
    inline?: (string | RegExp)[];
    /**
     * Try to guess the CJS version of a package when it's invalid ESM
     * @default true
     */
    fallbackCJS?: boolean;
}
interface ViteNodeResolveId {
    external?: boolean | 'absolute' | 'relative';
    id: string;
    meta?: Record<string, any> | null;
    moduleSideEffects?: boolean | 'no-treeshake' | null;
    syntheticNamedExports?: boolean | string | null;
}
interface ViteNodeServerOptions {
    /**
     * Inject inline sourcemap to modules
     * @default true
     */
    sourcemap?: boolean;
    /**
     * Deps handling
     */
    deps?: DepsHandlingOptions;
    /**
     * Tranform method for modules
     */
    transformMode?: {
        ssr?: RegExp[];
        web?: RegExp[];
    };
}

declare function guessCJSversion(id: string): string | undefined;
declare function shouldExternalize(id: string, options?: DepsHandlingOptions, cache?: Map<string, Promise<string | false>>): Promise<string | false>;

declare class ViteNodeServer {
    server: ViteDevServer;
    options: ViteNodeServerOptions;
    promiseMap: Map<string, Promise<TransformResult | null | undefined>>;
    constructor(server: ViteDevServer, options?: ViteNodeServerOptions);
    shouldExternalize(id: string): Promise<string | false>;
    fetchModule(id: string): Promise<{
        externalize: string;
        code?: undefined;
    } | {
        code: string | undefined;
        externalize?: undefined;
    }>;
    resolveId(id: string, importer?: string): Promise<ViteNodeResolveId | null>;
    transformRequest(id: string): Promise<TransformResult | null | undefined>;
    private getTransformMode;
    private _transformRequest;
}
declare function withInlineSourcemap(result: TransformResult): Promise<TransformResult>;

export { ViteNodeServer, guessCJSversion, shouldExternalize, withInlineSourcemap };
